\section{Metode Eliminasi Gauss}

<<echo=False>>=
import numpy as np
@

Dalam metode eliminasi Gauss, matriks $\mathbf{A}$ dan vektor kolom $\mathbf{b}$ akan
ditransformasi sedemikian rupa sehingga diperoleh matriks dalam bentuk segitiga atas atau segitiga bawah.

Transformasi yang dilakukan adalah sebagai berikut.
\begin{align*}
A_{ij} \leftarrow A_{ij} - \alpha A_{kj} \\
b_{i} \leftarrow b_{i} - \alpha b_{k}
\end{align*}
%
Setelah matriks $\mathbf{A}$ direduksi menjadi bentuk segitiga atas, solusi persamaan
linear yang dihasilkan dapat dicari dengan menggunakan substitusi mundur (backward substitution).
%
$$
x_{k} = \left(
b_{k} - \sum_{j=k+1}^{N} A_{kj} x_{j}
\right)\frac{1}{A_{kk}}\,\,\,, k = N-1, N-2, \ldots, 1
$$

\subsection*{Contoh penggunaan metode eliminasi Gauss}

Perhatikan sistem persamaan linear berikut ini:
%
\begin{align*}
x_{1} + x_{2} + x_{3} & = 4 \\
2x_{1} + 3x_{2} + x_{3} & = 9 \\
x_{1} - x_{2} - x_{3} & = -2
\end{align*}

Persamaan di atas dapat diubah dalam bentuk matriks sebagai
%
$$
\begin{bmatrix}
1 & 1 & 1 \\
2 & 3 & 1 \\
1 & -1 & -1
\end{bmatrix}
\begin{bmatrix}
x_{1} \\
x_{2} \\
x_{3}
\end{bmatrix} =
\begin{bmatrix}
4 \\
9 \\
-2
\end{bmatrix}
$$


<<>>=
A = np.matrix([
    [1, 1, 1],
    [2, 3, 1],
    [1, -1, -1]
])
A
@


<<>>=
b = np.matrix([4, 9, -2]).transpose()
b
@

Karena kita akan memodifikasi matrix `A` dan `b`, maka kita harus membuat backup (copy) dari nilai asli mereka.
<<>>=
A_orig = np.matrix.copy(A)
b_orig = np.matrix.copy(b)
@

Dimulai dengan menggunakan elemen matriks $A_{11}$ (atau \txtinline{A[0,0]} dalam notasi Numpy)
sebagai pivot, kita akan melakukan reduksi pada baris kedua dan ketiga.

Kita akan mulai dengan reduksi baris kedua.
<<>>=
alpha = A[1,0]/A[0,0]
A[1,:] = A[1,:] - alpha*A[0,:]
b[1] = b[1] - alpha*b[0]

print("A = \n", A)
print("b = \n", b)
@

Masih menggunakan \txtinline{A[0,0]} sebagai pivot, kita akan reduksi baris ketiga:
<<>>=
alpha = A[2,0]/A[0,0]
A[2,:] = A[2,:] - alpha*A[0,:]
b[2] = b[2] - alpha*b[0]

print("A = \n", A)
print("b = \n", b)
@

Setelah menjadikan \txtinline{A[0,0]} sebagai pivot dan mereduksi baris kedua dan ketiga,
kita akan menggunakan \txtinline{A[1,1]} sebagai pivot dan mereduksi baris ketiga:
<<>>=
alpha = A[2,1]/A[1,1]
A[2,:] = A[2,:] - alpha*A[1,:]
b[2] = b[2] - alpha*b[1]

print("A = \n", A)
print("b = \n", b)
@

Sekarang `A` telah tereduksi menjadi bentuk matriks segitiga atas. Persamaan yang kita
miliki sekarang adalah:
%
$$
\begin{bmatrix}
1 & 1 & 1 \\
0 & 1 & -3 \\
0 & 0 & -8
\end{bmatrix}
\begin{bmatrix}
x_{1} \\
x_{2} \\
x_{3}
\end{bmatrix} =
\begin{bmatrix}
4 \\
1 \\
-4
\end{bmatrix}
$$

Sistem persamaan linear ini dapat dengan mudah diselesaikan dengan menggunakan
substitusi balik: mulai dari mencari $x_3$, kemudian $x_2$, dan akhirnya $x_1$.
<<>>=
N = len(b)
x = np.matrix(np.zeros((N,1)))

x[N-1] = b[N-1]/A[N-1,N-1]
for k in range(N-2,-1,-1):
    ss = 0.0
    for j in range(k+1,N):
        ss = ss + A[k,j]*x[j]
    x[k] = (b[k] - ss)/A[k,k]

for i in range(N):
    print(x[i])
@

Sekarang kita dapat mengecek apakah solusi yang kita dapatkan sudah benar.
<<>>=
# Gunakan matrix dan vektor original
# Hasil seharunya berupa vektor kolom dengan elemen-element 0
A_orig*x - b_orig
@

\subsection*{Kode Python untuk eliminasi Gauss}

Berikut ini adalah implementasi metode eliminasi Gauss pada Python.

Kode ini menerima masukan matriks \txtinline{A_} dan vektor kolom \txtinline{b_}.
dan mengembalikan solusi `x` dari sistem persamaan linear \txtinline{A_*x = b_}.
Tanda \txtinline{_} digunakan untuk menunjukkan input asli.
Pada kode berikut kita bekerja dengan matriks \txtinline{A} dan vektor \txtinline{x}
yang merupakan kopi dari input-input awal.
Kode ini terbatas pada vektor input \txtinline{b_} yang hanya terdiri
dari satu kolom. Kode dapat dikembangkan untuk kasus kolom lebih dari satu. 
<<>>=
def gauss_elim(A_, b_):
    N, Nrhs = b_.shape
    assert Nrhs == 1
    A = np.matrix.copy(A_)
    b = np.matrix.copy(b_)
    # Eliminasi maju
    for k in range(0,N-1):
        for i in range(k+1,N):
            if A[i,k] != 0.0:
                alpha = A[i,k]/A[k,k]
                A[i,:] = A[i,:] - alpha*A[k,:]
                b[i] = b[i] - alpha*b[k]
    # Alokasi mememori untuk solusi
    x = np.matrix(np.zeros((N,1)))
    # Substitusi balik
    x[N-1] = b[N-1]/A[N-1,N-1]
    for k in range(N-2,-1,-1):
        ss = 0.0
        for j in range(k+1,N):
            ss = ss + A[k,j]*x[j]
        x[k] = (b[k] - ss)/A[k,k]
    return x
@

Contoh penggunaan:
<<>>=
gauss_elim(A_orig, b_orig)
@

Selesaikan persamaan:

$$
\begin{bmatrix}
6 & -4 & 1 \\
4 & 6 & -4 \\
1 & -4 & 6
\end{bmatrix}
\begin{bmatrix}
x_1 \\
x_2 \\
x_3
\end{bmatrix} = 
\begin{bmatrix}
-14 \\
36 \\
6
\end{bmatrix}
$$

<<>>=
A = np.matrix([
    [6, -4, 1],
    [-4, 6, -4],
    [1, -4, 6]], dtype=np.float64)
b = np.matrix([-14, 36, 6], dtype=np.float64).transpose()
x = gauss_elim(A, b)
print("Solusi x=\n", x)
print("Cek solusi: Ax - b\n", A*x - b)
@


Selasaikan persamaan:

$$
\begin{bmatrix}
3 & 1 & -1 \\
5 & 8 & 2 \\
3 & 1 & 10
\end{bmatrix}
\begin{bmatrix}
x_1 \\
x_2 \\
x_3
\end{bmatrix} =
\begin{bmatrix}
1 \\
-4 \\
5
\end{bmatrix}
$$

Menggunakan eliminasi Gauss:
<<>>=
A = np.matrix( [
    [3, 1, -1],
    [5, 8, 2],
    [3, 1, 10]
], dtype=np.float64)
b = np.matrix([1, -4, 5], np.float64).transpose()
x = gauss_elim(A, b)
print("Solusi x=\n", x)
print("Cek solusi: Ax - b\n", A*x - b)
@