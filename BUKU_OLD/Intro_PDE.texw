<<>>=
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
matplotlib.style.use("classic")
from mpl_toolkits.mplot3d import Axes3D
from mpl_toolkits.mplot3d import axes3d
from matplotlib import cm
@

<<>>=
import matplotlib.animation as animation
@

<<>>=
import IPython.display
@

Fungsi untuk animasi 2d (silakan modifikasi sesuai kebutuhan)


\begin{pythoncode}
def create_anim_2d(y, x, t, ymin, ymax):
    plt.clf()
    fig, ax = plt.subplots()
    plt.ylim(ymin, ymax)
    k = 0
    line, = ax.plot(x, y[:,k])

    time_template = "t = %.5f"
    time_text = ax.text(0.8, 0.9, "", transform=ax.transAxes)

    def init():
        line.set_xdata(x)
        line.set_ydata(y[:,0])
        time_text.set_text(time_template % t[0])
        return line, time_text

    def animate(k):
        line.set_xdata(x)
        line.set_ydata(y[:,k])
        time_text.set_text(time_template % t[k])
        return line, time_text

    anim = animation.FuncAnimation(fig, animate, init_func=init, interval=len(t), blit=True,
                                   frames=len(t));
    return anim
\end{pythoncode}


Fungsi untuk animasi 3d surface plot (silakan modifikasi sesuai kebutuhan)


<<>>=
def create_anim_surf3d(Z, X, Y, t, zmin, zmax):

    fig = plt.figure()
    ax = fig.add_subplot(111, projection="3d")

    def gen_surf_data(k, Z, line):
        ax.clear()
        line = ax.plot_surface(X, Y, Z[:,:,k], linewidth=2, cmap="jet", antialiased=False)
        ax.set_zlim(zmin, zmax)
        ax.set_title("t="+format("%.4f"%t[k]))
        return line,

    line = ax.plot_surface(X, Y, Z[:,:,0], linewidth=2, cmap="jet", antialiased=False)
    ax.set_title("t="+format("%.4f"%t[0]))

    anim = animation.FuncAnimation(fig, gen_surf_data, fargs=(Z, line),
                                   interval=len(t), frames=len(t), blit=False)

    return anim
@





<<>>=

@

# Old (kuliah 14 April 2019)

Rentang x = 0 sampai dengan x = 1, dengan selang diskritisasi h = 0.25


<<>>=
h = 0.25
A = 0.0
B = 1.0
Nx = int( (B-A)/h ) + 1
Nx
@


<<>>=
x = np.linspace(A,B, Nx)
x
@

Waktu t = 0 sampai dengan t = 1, dengan selang k = 0.25


<<>>=
k = 0.025
tmin = 0.0
tmax = 1.0
Nt = int( (tmax-tmin)/k ) + 1
Nt
@

Array suhu, dua dimensi


<<>>=
T = np.zeros( (Nx,Nt) )
@

Aplikasi syarat batas t = 0 (atau syarat awal)

$$
T(x, t=0) = \sin(\pi x )
$$


<<>>=
T[:,0] = np.sin(np.pi * x)
@


<<>>=
plt.clf()
plt.plot(x, T[:,0], marker="o")
plt.text( 0.0, 1.0, "t = 0")
@

Metode eksplisit
$$
T(x,t+k) = \lambda T(x-h,t) + (1-2\lambda)*T(x,t) + \lambda T(x+h,t)
$$



<<>>=
λ = k/h**2
λ
@

Mulai time-stepping dari t = 0 ke t selanjutnya t = 0 + k = k


<<>>=
# T[i,t] adalah T[xi,t]
idx_time = 1
for i in range(1,Nx-1):
    T[i,idx_time] = λ*T[i-1,idx_time-1] - (1 - 2*λ)*T[i,idx_time-1] + λ*T[i+1,idx_time-1]
@


<<>>=
plt.clf()
plt.plot(x, T[:,idx_time], marker="o")
plt.ylim(0,1)
plt.text( 0.0, 0.9, "t = 0.025")
@


<<>>=
# T[i,t] adalah T[xi,t]
idx_time = 2
for i in range(1,Nx-1):
    T[i,idx_time] = λ*T[i-1,idx_time-1] - (1 - 2*λ)*T[i,idx_time-1] + λ*T[i+1,idx_time-1]
@


<<>>=
plt.clf()
plt.plot(x, T[:,idx_time], marker="o")
plt.ylim(0,1)
plt.text( 0.0, 0.9, "t = 0.05")
@

Untuk semua waktu, gunakan loop


<<>>=
for idx_time in range(1,Nt):
    for i in range(1,Nx-1):
        T[i,idx_time] = λ*T[i-1,idx_time-1] - (1 - 2*λ)*T[i,idx_time-1] + λ*T[i+1,idx_time-1]
@

Misalkan kita ingin mengetahui distribusi suhu pada t = 0.5, atau indeks t = 20


<<>>=
t = k*20
t
@


<<>>=
plt.clf()
plt.plot(x, T[:,20], marker="o")
plt.ylim(0,1)
plt.text( 0.0, 0.9, "t = 0.5")
@


<<>>=
plt.clf()
plt.plot(x, T[:,10], marker="o")
plt.ylim(0,1)
plt.text( 0.0, 0.9, "t = 0.25")
@




<<>>=
def my_gaussian(x, center, alpha):
    return np.exp( -alpha*(x - center)**2 )
@


<<>>=
h = 0.05
A = 0.0
B = 1.0
center = 0.5
alpha = 1000
Nx = int( (B-A)/h ) + 1
print("Nx = ", Nx)
x = np.linspace(A, B, Nx)

k = 0.001
tmin = 0.0
tmax = 1.0
Nt = int( (tmax-tmin)/k ) + 1
print("Nt = ", Nt)

t = np.linspace(tmin, tmax, Nt)

T = np.zeros( (Nx,Nt) )

# Syarat awal
T[:,0] = np.sin(np.pi*x)**2

plt.clf()
plt.plot(x, T[:,0])
plt.text(0, 0.9, "t = 0")
@


<<>>=
λ = k/h**2
print("λ = ", λ)

for idx_time in range(1,Nt):
    for i in range(1,Nx-1):
        T[i,idx_time] = λ*T[i-1,idx_time-1] - (1 - 2*λ)*T[i,idx_time-1] + λ*T[i+1,idx_time-1]
@


<<>>=
plt.clf()
plt.plot(x, T[:,1])
plt.ylim(0,1)
plt.text(0, 0.9, "t = 0.0001")
@


<<>>=
my_gaussian(0.0, center, alpha)
@


<<>>=

@


<<>>=

@


<<>>=

@


<<>>=

@
