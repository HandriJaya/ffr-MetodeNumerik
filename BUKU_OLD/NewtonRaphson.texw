\section{Metode Newton-Raphson}

<<echo=False>>=
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.style
matplotlib.style.use("classic")
@

Metode Newton-Raphson adalah salah satu metode yang paling sering digunakan
untuk mencari akar persamaan nonlinear. Metode ini memerlukan informasi tebakan awal
akar dan turunan pertama dari fungsi yang akan dicari akarnya.

Metode Newton-Rapshon dapat diturunkan dari deret Taylor untuk $f(x)$ disekitar $x$:
$$
f(x_{i+1}) = f(x_{i}) +
f'(x_{i})(x_{i+1} - x_{i}) +
\mathcal{O}(x_{i+1} - x_{i})^2
$$

Jika $x_{i+1}$ adalah akar dari $f(x)=0$ maka diperoleh:
$$
0 = f(x_{i}) +
f'(x_{i})(x_{i+1} - x_{i}) +
\mathcal{O}(x_{i+1} - x_{i})^2
$$

Dengan mengasumsikan $x_{i}$ dekat dengan $x_{i+1}$, suku $\mathcal{O}(x_{i+1} - x_{i})$
dapat dianggap nol sehingga diperoleh:
$$
x_{i+1} = x_{i} - \frac{f(x_{i})}{f'(x_{i})}
$$

Sebagai contoh, kita akan menghitung akar dari persamaan $f(x) = x^3 - 35$

<<>>=
def func_04(x):
    return x**3 - 35.0

def dfunc_04(x):
    return 3*x**2
@


<<fig=False, include=False>>=
plt.clf()
x = np.linspace(2,4,500)
plt.plot(x, func_04(x))
plt.grid(); plt.savefig("figures/func_04.pdf")
@


<<>>=
def newton_raphson(f, df, x, TOL=1e-10, NiterMax=100):
    
    SMALL = np.finfo(float).eps
    
    for i in range(1,NiterMax+1):
        fx = f(x)
        dfx = df(x)
        
        if abs(dfx) <= SMALL:
            raise RuntimeError("Turunan f(x) sangat kecil")
            
        xr = x - fx/dfx
        
        print("Iter = %5d, x = %18.10f, abs(f(x)) %15.5e" % (i, x, abs(fx)))
        if abs(fx) <= TOL:
            print("Iterasi konvergen: akar ditemukan")
            return x
        
        x = xr
    
    print("WARNING: Konvergensi tidak diperleh setelah %d iterasi" % NiterMax)
    print("WARNING: Nilai tebakan akhir akan dikembalikan")
    return x
@

Kita akan coba mencari akar persamaan \txtinline{func_04} dengan beberapa tebakan awal.

<<>>=
x0 = 3.0
xr = newton_raphson(func_04, dfunc_04, x0)
@


<<>>=
x0 = 4.0
xr = newton_raphson(func_04, dfunc_04, x0)
@


<<>>=
x0 = 10.0
xr = newton_raphson(func_04, dfunc_04, x0)
@

Kita coba mencari akar dari \txtinline{func_01}.
Kita perlu mendefinisikan turunan dari \txtinline{func_01}.

<<>>=
def func_01(x):
    return 5*x**3 - 5*x**2 + 6*x - 2

def dfunc_01(x):
    return 15*x**2 - 10*x + 6
@


<<>>=
xr = newton_raphson(func_01, dfunc_01, 0.0)
@


<<>>=
xr = newton_raphson(func_01, dfunc_01, 1.0)
@


<<>>=
xr = newton_raphson(func_01, dfunc_01, 10.0)
@

Sebagai perbandingan dengan metode fixed-point, kita akan menghitung akar dari
persamaan $f(x) = e^{-x} - x$. Turunan pertama dari fungsi ini adalah $f'(x) = -e^{-x} - 1$


<<>>=
def func_05(x):
    return np.exp(-x) - x

def dfunc_05(x):
    return -np.exp(-x) - 1
@


<<>>=
x0 = 0.0
xr = newton_raphson(func_05, dfunc_05, x0)
@

Dapat diamati bahwa metode Newton-Raphson konvergen dengan cepat dibandingkan dengan metode fixed-point.