\section{Persamaan Gelombang 2d}

<<echo=False>>=
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
@

Persamaan gelombang:
\begin{equation}
c^2 \left( \frac{\partial^2 u(x,y,t)}{\partial x^2} +
\frac{\partial^2 u(x,y,t)}{\partial y^2}
\right) = \frac{\partial^2 u(x,y,t)}{\partial t^2}
\end{equation}

Domain:
\begin{itemize}
\item $0 \leq x \leq x_{f}$
\item $0 \leq y \leq y_{f}$
\item $0 \leq t \leq t_{f}$
\end{itemize}

Syarat batas:
\begin{itemize}
\item $u(0,y,t) = b_{x_{0}}(y,t)$
\item $u(x_{f},y,t) = b_{x_{f}}(y,t)$
\item $u(x,0,t) = b_{y_{0}}(x,t)$
\item $u(x,y_{f},t) = b_{y_{f}}(x,t)$
\end{itemize}

Syarat awal:
\begin{itemize}
\item $u(x,y,0) = u_{0}(x,y)$
\item $\left| \dfrac{\partial u}{\partial t} \right|_{t=0} = u'_{0}(x,y)$
\end{itemize}

Gunakan central difference untuk turunan kedua:
$$
c^2 \left(
\frac{u^{k}_{i+1,j} - 2u^{k}_{i,j} + u^{k}_{i-1,j}}{\left(\Delta x\right)^2} +
\frac{u^{k}_{i,j+1} - 2u^{k}_{i,j} + u^{k}_{i,j-1}}{\left(\Delta y\right)^2} =
\frac{u^{k+1}_{i,j} - 2u^{k}_{i,j} + u^{k-1}_{i,j}}{\left(\Delta t\right)^2}
\right)
$$

Dapat diperoleh persamaan eksplisit berikut:
$$
u^{k+1}_{i,j} = r_{x} \left( u^{k}_{i,j+1} + u^{k}_{i,j-1} \right) +
r_{y} \left( u^{k}_{i+1,j} + u^{k}_{i-1,j} \right) + 2(1 - r_x - r_y ) u^{k}_{i,j} - u^{k-1}_{i,j}
$$
dengan: $r_{x} = c^2 \dfrac{(\Delta t)^2}{(\Delta x)^2}$ dan $r_{y} = c^2 \dfrac{(\Delta t)^2}{(\Delta y)^2}$.

Untuk kasus $k = 0$, kita memerlukan $u^{-1}_{i,j}$. Nilai ini dapat diaproksimasi dari:
$$
\frac{u^{1}_{i,j} - u^{-1}_{i,j}}{2\Delta t} = u'_{0}(x_{i},y_{j})
$$
sehingga diperoleh
$$
u^{1}_{i,j} = \frac{r_{x}}{2} \left( u^{0}_{i,j+1} + u^{0}_{i,j-1} \right) +
\frac{r_{y}}{2} \left( u^{0}_{i+1,j} + u^{0}_{i-1,j} \right) +
2(1 - r_x - r_y)u^{0}_{i,j} + u'_{0}(x_{i},y_{j})\Delta t
$$
Syarat untuk stabilitas adalah:
$$
r = \frac{4c^2 (\Delta t)^2}{(\Delta x)^2 + (\Delta y)^2} \leq 1
$$

Implementasi
<<>>=
def wave_2d_exp( c2, xf, yf, tf, u0, u0p, bx0, bxf, by0, byf, Nx, Ny, Nt ):
    dx = xf/Nx
    x  = np.linspace(0.0, xf, Nx+1)
    dy = yf/Nx
    y  = np.linspace(0.0, yf, Ny+1)
    dt = tf/Nt
    t  = np.linspace(0.0, tf, Nt+1)
    u  = np.zeros( (Nx+1,Ny+1,Nt+1) )
    for i in range(Nx+1):
        for j in range(Ny+1):
            u[i,j,0]  = u0( x[j], y[i] )
    # Syarat batas
    for k in range(Nt+1):
        for j in range(Ny+1):
            u[0,j,k]  = bx0( y[j], t[k] )
            u[Nx,j,k] = bxf( y[j], t[k] )
    for k in range(Nt+1):
        for i in range(Ny+1):
            u[i,0,k]  = by0( x[i], t[k] )
            u[i,Ny,k] = byf( x[i], t[k] )
    rx = c2*dt**2/dx**2
    ry = c2*dt**2/dy**2
    r = 4*c2*dt**2/(dx**2 + dy**2)
    if r >= 1.0:
        print("WARNING: r >= 1, solusi tidak stabil")
        print("r = ", r)
    k = 0
    for i in range(1,Nx):
        for j in range(1,Ny):
            u[i,j,k+1] = 0.5*( rx*(u[i,j+1,k] + u[i,j-1,k]) + \
                               ry*(u[i-1,j,k] + u[i+1,j,k]) ) + \
                         2*(1 - rx - ry)*u[i,j,k] + dt*u0p( x[i], x[j] )
    for k in range(1,Nt):
        for i in range(1,Nx):
            for j in range(1,Ny):
                u[i,j,k+1] = rx*(u[i,j+1,k] + u[i,j-1,k]) + \
                             ry*(u[i-1,j,k] + u[i+1,j,k]) + \
                             2*(1 - rx - ry)*u[i,j,k] - u[i,j,k-1]
    return u, x, y, t
@

Contoh 1
<<>>=
def u0(x,y):
    return 0.1*np.sin(np.pi*x)*np.sin(np.pi*y/2)
def u0p(x,y):
    return 0.0
def bx0(y,t):
    return 0.0
def bxf(y,t):
    return 0.0
def by0(x,t):
    return 0.0
def byf(x,t):
    return 0.0

c2 = 0.25
xf = 2.0; yf = 2.0; tf = 4.0
Nx = 40; Ny = 40; Nt = 80
u, x, y, t = \
wave_2d_exp( c2, xf, yf, tf, u0, u0p, bx0, bxf, by0, byf, Nx, Ny, Nt )
@

<<fig=False, include=False>>=
plt.clf()
for k in [0, 1, 3, 4, -1]:
    plt.plot( x, u[:,1,k], label="t="+format("%.3f"%t[k]) )
plt.legend(); plt.savefig("figures/wave_2d_1.pdf")
@

{\centering
\includegraphics[scale=0.75]{figures/wave_2d_1.pdf}
\par}


<<fig=False, include=False>>=
plt.clf()
for k in [0, 1, 3, 4, -1]:
    plt.plot( y, u[1,:,k], label="t="+format("%.3f"%t[k]) )
plt.legend(); plt.savefig("figures/wave_2d_2.pdf")
@

{\centering
\includegraphics[scale=0.75]{figures/wave_2d_2.pdf}
\par}

<<fig=False, include=False>>=
X, Y = np.meshgrid(x,y);
k = 0
plt.clf()
fig = plt.figure()
ax = fig.gca(projection="3d")
surf = ax.plot_surface(X, Y, u[:,:,k], linewidth=2, cmap="jet", antialiased=False)
ax.set_title("t="+format("%.4f"%t[k]))
ax.view_init(elev=40., azim=35)
plt.savefig("figures/wave_2d_3.pdf")
@

{\centering
\includegraphics[scale=0.75]{figures/wave_2d_3.pdf}
\par}

Animasi pada Jupyter notebook
\begin{pythoncode}
anim = create_anim_surf3d(u, X, Y, t, -0.5, 0.5)
IPython.display.HTML(anim.to_html5_video())
\end{pythoncode}


Contoh 2
<<>>=
def u0(x,y):
    return np.exp(-30*( (x-1.0)**2 + (y-1.0)**2 ))
def u0p(x,y):
    return 0.0
def bx0(y,t):
    return 0.0
def bxf(y,t):
    return 0.0
def by0(x,t):
    return 0.0
def byf(x,t):
    return 0.0
c2 = 0.25
xf = 2.0; yf = 2.0; tf = 16.0
Nx = 50; Ny = 50; Nt = 320
u, x, y, t = \
wave_2d_exp( c2, xf, yf, tf, u0, u0p, bx0, bxf, by0, byf, Nx, Ny, Nt )
@


<<fig=False, include=False>>=
X, Y = np.meshgrid(x,y)
k = 0
plt.clf()
fig = plt.figure()
ax = fig.gca(projection="3d")
surf = ax.plot_surface(X, Y, u[:,:,k], linewidth=2, cmap="jet", antialiased=False)
ax.set_title("t="+format("%.4f"%t[k]))
ax.view_init(elev=10., azim=20)
plt.savefig("figures/wave_2d_4.pdf")
@

{\centering
\includegraphics[scale=0.75]{figures/wave_2d_4.pdf}
\par}

\begin{pythoncode}
anim = create_anim_surf3d(u, X, Y, t, -1.0, 1.0)
IPython.display.HTML(anim.to_html5_video())
\end{pythoncode}
