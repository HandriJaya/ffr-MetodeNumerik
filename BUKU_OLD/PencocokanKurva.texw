<<echo=False>>=
import math
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
matplotlib.style.use("classic")
import scipy.interpolate
@

\section{Kuadrat terkecil (least square)}

<<>>=
"""
c = polyFit(xData,yData,m).
Returns coefficients of the polynomial
p(x) = c[0] + c[1]x + c[2]xˆ2 +...+ c[m]xˆm
that fits the specified data in the least squares sense.
"""
def polyN_fit(xData, yData, m):
    a = np.zeros((m+1,m+1))
    b = np.zeros(m+1)
    s = np.zeros(2*m+1)
    for i in range(len(xData)):
        temp = yData[i]
        for j in range(m+1):
            b[j] = b[j] + temp
            temp = temp*xData[i]
        temp = 1.0
        for j in range(2*m+1):
            s[j] = s[j] + temp
            temp = temp*xData[i]
    for i in range(m+1):
        for j in range(m+1):
            a[i,j] = s[i+j]
    
    c = np.linalg.solve(a,b)
    return c
@


<<>>=
x_data = np.array([0.0, 1.0, 2.0, 2.5, 3.0])
y_data = np.array([2.9, 3.7, 4.1, 4.4, 5.0])
@


<<>>=
linear_reg = polyN_fit(x_data, y_data, 1)
linear_reg
@

<<>>=
plt.clf()
plt.plot(x_data, y_data, marker="o", linewidth=0, label="data")
x_plt = np.linspace(x_data[0], x_data[-1], 200)
plt.plot(x_plt, x_plt*linear_reg[1] + linear_reg[0], label="Regresi linear")
plt.legend()
@


<<>>=
n = len(x_data) - 1
m = len(c) - 1
sigma = 0.0
for i in range(n+1):
    p = evalPoly(c, x_data[i])
    sigma = sigma + (y_data[i] - p)**2
    sigma = math.sqrt(sigma/(n - m))
    return sigma
@

