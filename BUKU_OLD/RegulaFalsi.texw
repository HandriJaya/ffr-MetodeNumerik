\section{Metode Regula-Falsi}

<<echo=False>>=
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.style
matplotlib.style.use("classic")
@

<<echo=False>>=
def func_01(x):
    return 5*x**3 - 5*x**2 + 6*x - 2

def func_02(x):
    return x**2 * np.abs(np.cos(np.sqrt(x))) - 5
@

Metode regula-falsi mirip dengan metode bisection, namun dengan persamaan yang berbeda untuk menentukan
aproksimasi akar. Pada metode bisection, tebakan akar diberikan sebagai nilai
tengah dari $x_1$ dan $x_2$ sedangkan pada metode regula-falsi digunakan interpolasi linear
antara $f(x_1)$ dan $f(x_2)$. Tebakan akar adalah perpotongan antara garis interpolasi linear
ini dengan sumbu $x$. Hasil akhirnya adalah:
$$
x_r = x_2 - \frac{f(x_2)}{f(x_1) - f(x_2)}(x_1 - x_2)
$$

<<>>=
def regula_falsi(f, x1, x2, TOL=1e-10, NiterMax=100):
    
    f1 = f(x1)
    f2 = f(x2)
    
    if f1*f2 > 0:
        raise RuntimeError("f1 dan f2 memiliki tanda yang sama")
        
    for i in range(1,NiterMax+1):
        
        xr = x2 - f2*(x1 - x2)/(f1 - f2)
        fxr = f(xr)
        
        if abs(fxr) <= TOL:
            print("Iterasi konvergen: akar ditemukan")
            return xr
        
        print("Iter = %5d, xr = %18.10f, abs(fxr) = %15.5e" % (i, xr, abs(fxr)))
    
        # f1 dan fxr berbeda tanda
        if f1*fxr < 0.0:
            x2 = xr
            f2 = fxr
        else:
            x1 = xr
            f1 = fxr
        
    print("WARNING: Konvergensi tidak diperleh setelah %d iterasi" % NiterMax)
    print("WARNING: Nilai tebakan akhir akan dikembalikan")
    return xr
@


Contoh penggunaan:
<<>>=
xr = regula_falsi(func_01, 0.0, 1.0)
@

Contoh lain:
<<>>=
xr = regula_falsi(func_02, 3, 4)
@
