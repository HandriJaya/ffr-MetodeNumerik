\section{Metode secant}

<<echo=False>>=
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.style
matplotlib.style.use("classic")
@

Metode secant menggunakan ide yang sama dengan metode Newton-Raphson.
Perbedaannya adalah metode secant menggunakan aproksimasi terhadap turunan pertama dari $f(x)$.
$$
f'(x) \approx \frac{f(x_{i-1}) - f(x_{i})}{x_{i-1} - x_{i}}
$$

<<>>=
def secant(f, x, TOL=1e-10, NiterMax=100, DELTA=0.001):
    SMALL = np.finfo(float).eps
    # Untuk aproksimasi turunan pertama
    x_old = x + DELTA
    for i in range(1,NiterMax+1):
        fx = f(x)
        fx_old = f(x_old)
        dfx = (fx_old - fx)/(x_old - x)
        if abs(dfx) <= SMALL:
            raise RuntimeError("Turunan f(x) sangat kecil")
        xr = x - fx/dfx
        print("Iter = %5d, x = %18.10f, abs(f(x)) %15.5e" % (i, x, abs(fx)))
        if abs(fx) <= TOL:
            print("Iterasi konvergen: akar ditemukan")
            return x
        x_old = x
        x = xr
    print("WARNING: Konvergensi tidak diperoleh setelah %d iterasi" % NiterMax)
    print("WARNING: Nilai tebakan akhir akan dikembalikan")
    return x
@

% Function definition for the examples
<<echo=False>>=
def func_01(x):
    return 5*x**3 - 5*x**2 + 6*x - 2

def func_04(x):
    return x**3 - 35.0

def func_05(x):
    return np.exp(-x) - x
@

<<>>=
x0 = 0.0
xr = secant(func_05, x0)
@


<<>>=
x0 = 0.0
xr = secant(func_01, x0)
@

<<>>=
x0 = 1.0
xr = secant(func_04, x0)
@
